# Archivos byte-compilados / optimizados / DLL
__pycache__/
*.py[cod]
*$py.class

# Extensiones de C
*.so

# Distribución / empaquetado
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Normalmente estos archivos son escritos por un script en Python desde una plantilla
#  antes de que PyInstaller construya el ejecutable, para inyectar fecha/u otra información.
*.manifest
*.spec

# Registros del instalador
pip-log.txt
pip-delete-this-directory.txt

# Informes de pruebas unitarias / cobertura
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Traducciones
*.mo
*.pot

# Archivos relacionados con Django:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Archivos relacionados con Flask:
instance/
.webassets-cache

# Archivos de Scrapy:
.scrapy

# Documentación con Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Para una librería o paquete, podrías querer ignorar estos archivos ya que el código
#   está diseñado para ejecutarse en múltiples entornos; de lo contrario, inclúyelos:
# .python-version

# pipenv
#   Según pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
#   Sin embargo, en caso de colaboración, si existen dependencias específicas de plataforma o
#   sin soporte multiplataforma, pipenv podría instalar dependencias que no funcionen, o no
#   instalar todas las necesarias.
#Pipfile.lock

# UV
#   Similar a Pipfile.lock, generalmente se recomienda incluir uv.lock en el control de versiones.
#   Esto es especialmente recomendable para paquetes binarios para asegurar reproducibilidad, y
#   es más común ignorarlo en librerías.
#uv.lock

# poetry
#   Similar a Pipfile.lock, se recomienda incluir poetry.lock en el control de versiones.
#   Esto es especialmente recomendable para paquetes binarios para asegurar reproducibilidad, y
#   es más común ignorarlo en librerías.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar a Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
#pdm.lock
#   pdm guarda configuraciones del proyecto en .pdm.toml, pero se recomienda no incluirlo
#   en el control de versiones.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; usado por ej. en github.com/David-OConnor/pyflow y github.com/pdm-project/pdm
__pypackages__/

# Archivos de Celery
celerybeat-schedule
celerybeat.pid

# Archivos parseados por SageMath
*.sage.py

# Entornos
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configuración del proyecto Spyder
.spyderproject
.spyproject

# Configuración del proyecto Rope
.ropeproject

# Documentación con mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Verificador de tipos Pyre
.pyre/

# Analizador estático pytype
.pytype/

# Símbolos de depuración de Cython
cython_debug/

# PyCharm
#  La plantilla específica de JetBrains se mantiene en un archivo JetBrains.gitignore separado que puede
#  encontrarse en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  y puede añadirse al .gitignore global o combinarse con este archivo. Para una opción más drástica
#  (no recomendada) puedes descomentar lo siguiente para ignorar toda la carpeta .idea.
#.idea/

# Archivos de Ruff:
.ruff_cache/

# Archivo de configuración de PyPI
.pypirc
